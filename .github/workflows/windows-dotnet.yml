name: .NET Build, Test and Report

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    - name: Restore NuGet packages
      run: nuget restore WindowsApp.sln

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.1

    - name: Build solution
      run: msbuild WindowsApp.sln /p:Configuration=Release

    - name: Install VSTest Console
      uses: darenm/Setup-VSTest@v1

    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Download OpenCover
      run: |
        Invoke-WebRequest -Uri "https://github.com/OpenCover/opencover/releases/download/4.7.1221/OpenCover.4.7.1221.zip" -OutFile "OpenCover.zip"
        Expand-Archive OpenCover.zip -DestinationPath "OpenCover"
    
    - name: Run tests with OpenCover and generate coverage report
      run: |
        $testDll = Get-ChildItem -Recurse -Filter "ConverterApp.Tests.dll" | Select-Object -First 1
        $resultsDir = "TestResults"
        mkdir $resultsDir
    
        # Run tests through OpenCover
        .\OpenCover\OpenCover.Console.exe `
          -target:"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" `
          -targetargs:"$($testDll.FullName) /Logger:trx /ResultsDirectory:$resultsDir" `
          -output:"coverage.xml" `
          -register:user
    
        # Generate Cobertura report
        reportgenerator -reports:"coverage.xml" -targetdir:"CoverageReport" -reporttypes:Cobertura

    - name: Check Critical Test Failures and Generate Detailed Report
      run: |
        $trxPath = Get-ChildItem -Path TestResults -Filter *.trx | Select-Object -First 1
        $xml = [xml](Get-Content $trxPath.FullName)
        $resultsDir = "TestResults"
        $csvPath = "$resultsDir/TestResults.csv"
        $testResults = @()
        $criticalFailed = $false

        foreach ($unitTestResult in $xml.TestRun.Results.UnitTestResult) {
          $testId = $unitTestResult.testId
          $testDefinition = $xml.TestRun.TestDefinitions.UnitTest | Where-Object { $_.id -eq $testId }
          
          # Safely extract category names
          $categoryItems = $testDefinition.TestMethod.TestCategory.TestCategoryItem
          $categories = @()
          
          if ($categoryItems) {
              if ($categoryItems -is [System.Array]) {
                  $categories = $categoryItems | ForEach-Object { $_.Name }
              } else {
                  $categories = @($categoryItems.Name)
              }
          }
          
          # Determine if test is critical
          $isCritical = "Critical" -in $categories

          # --- Debug Output ---
          Write-Host "Test Case: $($unitTestResult.testName)"
          Write-Host "Categories: $($categories -join ', ')"
          Write-Host "IsCritical: $isCritical"
          # --- End Debug Output ---

          if ($unitTestResult.outcome -eq "Failed" -and $isCritical) {
            Write-Host "❌ Critical test failed: $($unitTestResult.testName)"
            $criticalFailed = $true
          }

          $testResults += [PSCustomObject]@{
            TestCases  = $unitTestResult.testName
            Outcome    = $unitTestResult.outcome
            StartTime  = $unitTestResult.startTime
            EndTime    = $unitTestResult.endTime
            IsCritical = $isCritical
            Categories = ($categories -join ", ")
          }
        }

        $testResults | Export-Csv -Path $csvPath -NoTypeInformation

        if ($criticalFailed) {
          Write-Error "Critical test failure detected. Failing workflow."
          exit 1
        } else {
          Write-Host "✅ No critical test failures."
        }

    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: TestResults
        path: TestResults/*.trx

    - name: Upload CSV Test Results
      uses: actions/upload-artifact@v4
      with:
        name: TestResultsCSV
        path: TestResults/TestResults.csv
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: CoverageReport
        path: CoverageReport/Cobertura.xml
