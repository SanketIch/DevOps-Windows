name: .NET Build, Test and Report

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    - name: Restore NuGet packages
      run: nuget restore WindowsApp.sln

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.1

    - name: Build solution
      run: msbuild WindowsApp.sln /p:Configuration=Release

    - name: Install VSTest Console
      uses: darenm/Setup-VSTest@v1

    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Download OpenCover
      run: |
        Invoke-WebRequest -Uri "https://github.com/OpenCover/opencover/releases/download/4.7.1221/OpenCover.4.7.1221.zip" -OutFile "OpenCover.zip"
        Expand-Archive OpenCover.zip -DestinationPath "OpenCover"

    - name: Run tests with OpenCover and generate coverage report
      run: |
        $testDll = Get-ChildItem -Recurse -Filter "ConverterApp.Tests.dll" | Select-Object -First 1
        $resultsDir = "TestResults"
        mkdir $resultsDir

        # Run tests and collect coverage
        .\OpenCover\OpenCover.Console.exe `
          -target:"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" `
          -targetargs:"$($testDll.FullName) /Logger:trx /ResultsDirectory:$resultsDir /TestCaseFilter:Category=Critical" `
          -output:"critical_coverage.xml" `
          -register:user

        $criticalTestResultsPath = Get-ChildItem -Path $resultsDir -Filter "*.trx" | Select-Object -First 1
        $criticalTestXml = [xml](Get-Content $criticalTestResultsPath.FullName)

        $criticalTestFailed = $false
        foreach ($result in $criticalTestXml.TestRun.Results.UnitTestResult) {
          if ($result.outcome -ne "Passed") {
            Write-Host "Critical test '$($result.testName)' failed."
            $criticalTestFailed = $true
          }
        }

        if ($criticalTestFailed) {
          Write-Error "One or more critical tests failed. Workflow will be marked as failed."
          exit 1
        } else {
          Write-Host "All critical tests passed."
        }

        # Run other tests (excluding critical) and collect coverage
        .\OpenCover\OpenCover.Console.exe `
          -target:"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" `
          -targetargs:"$($testDll.FullName) /Logger:trx /ResultsDirectory:$resultsDir /TestCaseFilter:Category!=Critical" `
          -output:"non_critical_coverage.xml" `
          -register:user

        # Generate Cobertura report (you might want to merge coverage reports for a complete picture)
        reportgenerator -reports:"critical_coverage.xml;non_critical_coverage.xml" -targetdir:"CoverageReport" -reporttypes:Cobertura

    - name: Convert .trx to CSV
      run: |
        $trxPath = Get-ChildItem -Path TestResults -Filter *.trx | Select-Object -First 1
        $xml = [xml](Get-Content $trxPath.FullName)
        $csvPath = "TestResults/TestResults.csv"
        $results = foreach ($unitTestResult in $xml.TestRun.Results.UnitTestResult) {
          [PSCustomObject]@{
            TestCases  = $unitTestResult.testName
            Outcome    = $unitTestResult.outcome
            StartTime = $unitTestResult.startTime
            EndTime    = $unitTestResult.endTime
          }
        }
        $results | Export-Csv -Path $csvPath -NoTypeInformation

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: TestResults
        path: TestResults/*.trx

    - name: Upload CSV Test Results
      uses: actions/upload-artifact@v4
      with:
        name: TestResultsCSV
        path: TestResults/TestResults.csv

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: CoverageReport
        path: CoverageReport/Cobertura.xml
